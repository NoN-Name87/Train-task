Задание:
Дано расписание переездов поездов между несколькими станциями в формате “номер поезда;станция отправления;станция прибытия;стоимость;время отправления;время прибытия” (гарантированно, что нет переездов дольше суток) .
Необходимо получить “лучшие” варианты (несколько, если это возможно) проезда между всеми станциями так чтобы побывать на каждой станции 1 раз. 
Запросы на лучшие варианты:
Лучшие по цене
Лучшие по времени
Алгоритм решения:
1.Считываем файл,игнорируя знаки обозначений.
2.Сортируем по станциям отправления.
3.Получаем индексы станций(для быстрого поиска значений)
4.Для начальной станции маршрута ищем самое лучшее время или цену,отсекая неэффективные варианты,добавляем в массив индекс эффективного решения.
5.Находим индекс значения конечной станции.(массив индксов из пункта 3).
5.После, учитываем время с которой придется ждать отправления станции.
6.Прибавляем время проезда из станцию в станцию.
7.Если конечная станция равна начальным станциям мартшрута,то отсекаем данный вариант.
8.Если данное условие исполняется,то сравнивается время и индекс значения заносится в массив.
9.Повторяем действия для каждой станции.
10.Выводим результаты.
Функции:
void Read file - Считывает csv файл,игнорируя символы и вносит значения в массив структур Trains. 
void Sort_Vec - Сортирует по начальным станциям массив структур,используя сортировку расческой.
void Count_arr - находит индекс начальных станций и заносит в вектор index.
void Train_options_time - выбирает варианты решений по времени для каждой станции, заносит лучший вариант в массив структур Ways.
void Train_best_price - аналогичная функция как и void Train_options_time только для ценового решения.
int Convert_time - возвращает разницу во времени,используется как вспомогательная функция для void Train_options_time.
int Location - находит индексы нужной станции и выводит индекс. 
Вспомогательная функция для void Train_options_time и void Train_best_price.
bool Check_station - проверяет наличие коллизии между станциями отправления маршрута и конечной станции текущего варианта.
Вспомогательная функция для void Train_options_time и void Train_best_price.
void Display_Result - Выводит результаты алгоритма.
Результаты:
Как видите,на скриншоте№1,для каждой станции найдено лучшее решение по времени,кроме одной(т.к. это тупиковая ветвь и выделена красным прямоугольником).
На скриншоте№2,найдено всего лишь одно решение.